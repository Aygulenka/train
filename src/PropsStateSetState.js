import React from 'react';
import './App.css';
import Example from './Example';

const PropsStateSetState = () =>{

    return(
        <div>
            <div>
                <h1>
                Изменение пропсов внутри компонента может привести к ряду потенциальных проблем, включая:
                </h1>
               <p className="bold"> Несогласованность данных:</p> Когда компонент изменяет свои пропсы, это может привести к несогласованности данных между родительским и дочерним компонентами. Родитель может думать, что данные в дочернем компоненте определены определенным образом, в то время как дочерний компонент может обновить пропсы так, что они больше не соответствуют ожиданиям родителя.

               <p className="bold">Непредсказуемость поведения:</p> Изменение пропсов внутри компонента может сделать его поведение менее предсказуемым. Когда компонент получает пропсы извне, его поведение зависит только от входных данных, что делает его более прозрачным и легким в поддержке.

               <p className="bold">Потеря данных:</p> Если компонент изменяет пропсы и не управляет этим процессом должным образом, это может привести к потере данных или перезаписи важных значений, переданных извне.

               <p className="bold">Затруднение отслеживания изменений:</p> Изменение пропсов внутри компонента может усложнить отслеживание того, откуда приходят изменения и как они влияют на состояние компонента.

В целом, хорошей практикой является создание компонентов, которые принимают пропсы извне и не изменяют их внутри. Если изменение пропсов необходимо, рассмотрите возможность использования локального состояния (useState) вместо изменения пропсов.
            </div>
            <div>
                <h1>Что такое state? Для чего он используется?</h1>
                <p>
                State (состояние) в React представляет собой объект, который содержит данные, влияющие на отображение компонента. Это внутренний объект компонента, который может изменяться в течение жизненного цикла компонента.
</p>
                <p >State используется для хранения и управления динамическими данными, которые могут изменяться в результате взаимодействия пользователя, сетевых запросов, или других внешних событий. Он позволяет компонентам React отслеживать изменения данных и перерисовывать себя при необходимости, чтобы отобразить актуальную информацию.
                </p>
                <p className="bold">Основные характеристики state:</p>

                <p className="bold">Локальность:</p> Каждый компонент в React может иметь свой собственный state, который не влияет на состояние других компонентов. Это позволяет создавать изолированные и переиспользуемые компоненты.

                <p className="bold">Изменяемость:</p> State можно изменять с использованием функции setState. После изменения state, React перерисовывает компонент, чтобы отобразить новые данные.
                
                <p className="bold">Пример</p>
                <Example />
                <p className='bold'>Что происходит, когда вы вызываете setState?</p>
            
            </div>

        </div>
    )
}

export default PropsStateSetState